{
  "Snippet arquivo responsável pela conexão com o CosmosDb": {
    "prefix": "cosmos-serverless-conn",
    "body": [
      "const MongoClient = require('mongodb').MongoClient;",
      "",
      "let client =  null;",
      "",
      "module.exports = {",
      "  connect: () => {",
      "    const auth = {",
      "      user: process.env.CosmosDBUser,",
      "      password: process.env.CosmosDBPassword",
      "    };",
      "",
      "    return new Promise((resolve, reject) => {",
      "      if (client == null) {",
      "        MongoClient.connect(process.env.CosmosDBURL, { auth: auth }).then(_client => {",
      "          client = _client;",
      "          resolve(_client);  ",
      "        }).catch(err => {",
      "          reject(err.status);",
      "        });",
      "      } else {",
      "        resolve(client);",
      "      }",
      "    })",
      "  }",
      "};"
    ],
    "description": "Snippet arquivo responsável pela conexão com o CosmosDb"
  },
  "Snippet responsável por criar um novo 'Funcionário' via CosmosDb": {
    "prefix": "cosmos-serverless-create",
    "body": [
      "const conn = require(\"../shared/databaseCosmosDb\");",
      "const handleError = require(\"../shared/error\");",
      "",
      "module.exports = (context, req) => {",
      "  conn",
      "    .connect()",
      "    .then(client => {",
      "      query(client);",
      "    })",
      "    .catch(err => handleError(500, err, context));",
      "",
      "  const query = client => {",
      "    let funcionario = ({",
      "      id,",
      "      nomeFuncionario,",
      "      cargo,",
      "      numeroIdentificador",
      "    } = context.req.body);",
      "",
      "    const database = client.db(\"crud-serverless-wavy\");",
      "",
      "    database",
      "      .collection(\"funcionarios\")",
      "      .insertOne({",
      "        id: funcionario.id,",
      "        nomeFuncionario: funcionario.nomeFuncionario,",
      "        cargo: funcionario.cargo,",
      "        numeroIdentificador: funcionario.numeroIdentificador",
      "      })",
      "      .then(res => {",
      "        context.res = {",
      "          body: funcionario",
      "        };",
      "",
      "        context.done();",
      "      })",
      "      .catch(err => {",
      "        context.log(\"Erro ao criar um novo(a) Funcionário(a)\");",
      "        context.res = {",
      "          status: 500,",
      "          body: err.stack",
      "        };",
      "",
      "        context.done();",
      "      });",
      "  };",
      "};"
    ],
    "description": "Snippet responsável por criar um novo 'Funcionário' via CosmosDb"
  }

}