{
  "Snippet responsável pela conexão com o CosmosDb": {
    "prefix": "cosmos-serverless-conn",
    "body": [
      "const MongoClient = require('mongodb').MongoClient;",
      "",
      "const auth = {",
      "  user: process.env.CosmosDBUser,",
      "  password: process.env.CosmosDBPassword",
      "};",
      "",
      "const clientPromise = MongoClient.connect(process.env.CosmosDBURL, { auth: auth });",
      "",
      "module.exports = {",
      "  connect: () => clientPromise",
      "};",
      ""
    ],
    "description": "Snippet responsável pela conexão com o CosmosDb"
  },
  "Snippet arquivo responsável por criar um novo 'Funcionário' via CosmosDb": {
    "prefix": "cosmos-serverless-create",
    "body": [
      "const conn = require(\"../shared/databaseCosmosDb\");",
      "const handleError = require(\"../shared/error\");",
      "",
      "module.exports = async function(context, req) {",
      "  try {",
      "    const client = await conn.connect();",
      "    const database = client.db(\"crud-serverless-wavy\");",
      "",
      "    const funcionario = ({",
      "      nomeFuncionario,",
      "      cargo,",
      "      numeroIdentificador",
      "    } = context.req.body);",
      "",
      "    const res = await database",
      "      .collection(\"funcionarios\")",
      "      .insertOne(funcionario);",
      "    context.res.json(res);",
      "",
      "  } catch (err) {",
      "    context.log(\"Erro ao criar um novo(a) Funcionário(a)\");",
      "    return handleError(500, err, context);",
      "  }",
      "}"
    ],
    "description": "Snippet arquivo responsável por criar um novo 'Funcionário' via CosmosDb"
  },
  "Snippet arquivo responsável por excluir um 'Funcionário' pelo Id via CosmosDb": {
    "prefix": "cosmos-serverless-delete",
    "body": [
      "const { ObjectID } = require('mongodb');",
      "const conn = require('../shared/databaseCosmosDb');",
      "const handleError = require('../shared/error');",
      "",
      "module.exports = async function(context, req) {",
      "  try {",
      "    const client = await conn.connect();",
      "    const db = client.db('crud-serverless-wavy');",
      "    const res = await db.collection('funcionarios')",
      "      .findOneAndDelete({ _id: ObjectID(context.req.params.id) });",
      "    const documentDeleted = res.value;",
      "    if (documentDeleted) {",
      "      return context.res.json({ message: 'Funcionário excluído com sucesso!' });",
      "    } else {",
      "      return handleError(500, \"Document not found\", context);",
      "    }",
      "",
      "  } catch (err) {",
      "    return handleError(500, err, context);",
      "  }",
      "};"
    ],
    "description": "Snippet arquivo responsável por excluir um 'Funcionário' pelo Id via CosmosDb"
  },
  "Snippet arquivo responsável por excluir um 'Funcionário' pelo Id via CosmosDb": {
    "prefix": "cosmos-serverless-listOne",
    "body": [
      "const { ObjectID } = require(\"mongodb\");",
      "const conn = require(\"../shared/databaseCosmosDb\");",
      "const handleError = require(\"../shared/error\");",
      "",
      "module.exports = async function(context) {",
      "  try {",
      "    const client = await conn.connect();",
      "    const db = client.db(\"crud-serverless-wavy\");",
      "    const res = await db.collection(\"funcionarios\")",
      "      .findOne({ _id: ObjectID(context.req.params.id) });",
      "",
      "    if (res) {",
      "      context.res.json(res);",
      "    } else {",
      "      context.res = {",
      "        status: 404,",
      "        body: \"Not found\"",
      "      }",
      "    }",
      "",
      "  } catch (err) {",
      "    return handleError(500, err, context);",
      "  }",
      "}"
    ],
    "description": "Snippet arquivo responsável por excluir um 'Funcionário' pelo Id via CosmosDb"
  },
  "Snippet arquivo responsável por listar Funcionarios via CosmosDb": {
    "prefix": "cosmos-serverless-list",
    "body": [
      "const conn = require(\"../shared/databaseCosmosDb\");",
      "const handleError = require(\"../shared/error\");",
      "",
      "module.exports = async function (context) {",
      "  try {",
      "    const client = await conn.connect();",
      "    const database = client.db(\"crud-serverless-wavy\");",
      "    const res = await database.collection(\"funcionarios\")",
      "      .find()",
      "      .toArray();",
      "    context.log(\"Retornando todos os funcionários com sucesso!\");",
      "    context.res.json(res);",
      "  } catch (err) {",
      "    return handleError(500, err, context);",
      "  }",
      "};"
    ],
    "description": "Snippet arquivo responsável por listar Funcionarios via CosmosDb"
  },
  "Snippet arquivo responsável por listar Funcionarios via CosmosDb": {
    "prefix": "cosmos-serverless-update",
    "body": [
      "const { ObjectID } = require(\"mongodb\");",
      "const conn = require(\"../shared/databaseCosmosDb\");",
      "const handleError = require(\"../shared/error\");",
      "",
      "module.exports = async function(context, req) {",
      "  try {",
      "    const client = await conn.connect();",
      "    const db = client.db(\"crud-serverless-wavy\");",
      "  ",
      "    const funcionario = ({",
      "      nomeFuncionario,",
      "      cargo,",
      "      numeroIdentificador",
      "    } = context.req.body);",
      "  ",
      "    funcionario._id = ObjectID(req.params.id);",
      "  ",
      "    const res = await db.collection(\"funcionarios\")",
      "      .findOneAndReplace({ _id: funcionario._id }, funcionario);",
      "",
      "    const updatedDocument = res.value;",
      "    if (updatedDocument) {",
      "      context.res.json(res.value);",
      "    } else {",
      "      return handleError(500, \"Document not found\", context);",
      "    }",
      "",
      "  } catch (err) {",
      "    return handleError(500, err, context);",
      "  }",
      "};"
    ],
    "description": "Snippet arquivo responsável por listar Funcionarios via CosmosDb"
  }
}